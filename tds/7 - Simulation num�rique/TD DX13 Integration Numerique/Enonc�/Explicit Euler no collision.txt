// Pseudocode for explicit Euler integration for a collection of N particles that move without colliding

void main()
{
    // Initialize variables needed by the simulation.
    Vector3D cur_S[2*N];    // S(t+delta_t)
    Vector3D prior_S[2*N];  // S(t)
    Vector3D S_derivs[2*N]; // dS/dt at time t
    float mass[N];          // Mass of particles
    float t;                // Current simulation time
    float delta_t;          // Physics time step

    // Set current state to initial conditions.
    for (i = 0; i < N; i++)
    {
        mass[i] = mass of particle i;
        cur_S[2*i] = particle i initial linear momentum;
        cur_S[2*i+1] = particle i initial position;
    }

    // Game simulation/rendering loop
    while (game simulation is running)
    {
        DoPhysicsSimulationStep(delta_t);
        for (i = 0; i < N; i++)
            Render particle i at position cur_S[2*i+1];
    }
}

// Update the physics
void DoPhysicsSimulationStep(delta_t)
{
    copy cur_S to prior_S

    // Calculate the state derivative vector.
    for (i = 0; i < N; i++)
    {
        S_derivs[2*i] = CalcForce(i);
        S_derivs[2*i+1] = prior_S[2*i] / mass[i];
    }

    // Integrate the equations of motion.
    ExplicitEuler(2*N, cur_S, prior_S, S_derivs, delta_t);

    // By integrating the equations of motion, we have
    // effectively moved simulation time forward by
    // delta_t.
    t = t + delta_t;
}
