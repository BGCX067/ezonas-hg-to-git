import sysresults = []files = {"1a":"neol2007.big.txt"    ,"1b":"3esl.big.txt"        ,"2a":"2of12inf.big.txt"    ,"2b":"2of12.big.txt"       ,"2c":"2of4brif.big.txt"    ,"2d":"2+2lemma.big.txt"    ,"2e":"2+2gfreq.big.txt"    ,"5":"5desk.big.txt"        ,"6":"6of12.big.txt"        }# f = open("big/"+files[sys.argv[1]], 'r')# f = open("short-words-all.txt", 'r')f = open("big/2of12inf.big.txt", 'r')#f = open("ff-normed.txt", 'r')def find2(word, char):    results = []    if word.count(char) < 2:        return [find(word, char)]    for a in range(len(word)):        if word[a] == char:            results.append(a)    return resultsdef seek_twins(word, optional = None): # warning word is the crypted word, we only use chars as symbols    if optional != None:        opt_sz = len(optional)            counts = {}    counts_list = []    size = len (word)    word = word.lower()    # counting char occurences    for a in range(ord('a'), ord('z')):        if word.count(chr(a)) > 1:            #print word, chr(a)            counts[chr(a)] = find2(word, chr(a))    for a in counts.items():        counts_list.append(a[1])    print "000000000011111111112"    print "012345678901234567890"    print word    print counts    print counts_list    # generating word shape for debugging, immutables strings are a bitch    print "word shape:"    l = ['_' for a in range(len(word))]    chars = "0123456789"    i = -1    shape = ""    for c in counts_list:        shape = ""        i += 1        for a in c:            l[a] = chars[i]        for a in l:            shape += a        print shape        print word    shape = ""    for a in l:        shape += a    print shape    # iterating dict file words    for fileword in f.readlines():        fileword = fileword[:-1].lower() # trimming end line        if len(fileword) != size:            continue # only looking for same length words        set_break = False        for c in counts_list:            if fileword[c[0]] != fileword[c[1]]:                set_break = True                break            # for a in range(1, len(c)):                # if fileword[c[a-1]] != fileword[c[a]]: # checking char at indices pair by pair                    # break # saves time        if set_break:            continue        if optional == None:            results.append(fileword)        elif fileword[:opt_sz] == optional:            results.append(fileword)    return shape# seek_twins("ECLZNL")#shape = seek_twins("ENLMDUDNLAM")#shape = seek_twins("YZDUAUJUBA")#shape = seek_twins("UADTVJUBA", "inf")#shape = seek_twins("RUATUDS")#shape = seek_twins("RUATUDS", "inf")# shape = seek_twins("QCLIAQR")shape = seek_twins("AGOUGMUS")if len(results) == 0:    print "LOL NEIN"if len(results) > 10:    print len(results),"result(s)"    print "first 10 results:"    for a in range(10):        print results[a],else:    for a in results:        print a,res = open ("results-shapes.txt", 'w')res.write(shape + "\n")for a in results:    res.write(a +"\n")