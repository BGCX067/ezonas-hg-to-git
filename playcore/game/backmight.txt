Black Might
Another failing RPG

Ogre3D
Gorilla GUI
Bullet

Quick roadmap on how I view what will be done first, what will never be done until XXXXX, and I will need to implement to start other stuff.

1. the game state pass/event mechanism
Most of the design here will ease the networking implementation which I want to do from scratch (since I want a p2p architecture).
It won't be final in any way since I want to go forward and make some demo, but I want to keep the programming design in mind with old-school masks, bunch of struct etc, data-oriented.

2. attaching the game state thing with Ogre3D.
I'd like to make an early alpha of some playable thing, by wiring Ogre3d with my game state system to have something I can show people.
The good thing is that from there I can easily tweak stuff, add factories and configurators, and there is still ton of stuff I can add while keeping the whole thing consistent.

This phase is important because:
- I have something to show. Graphically awful, no content, but it's still a game since it simulates game states.
- I can tweak a lot of thing, I can quickly add behaviours and it's still a game.
- The core of the game is being heavily modified and a lot of stuff is being added.
- I'm also wiring stuff in bullet (very basic things, nothing expensive) with the game state, this part will be quite important for the game to be smooth enough.

In this phase I might still waste some time looking to find decent model to fancy up the thing, but it's just to make it decent and less awful to look at.

3. Making a demo level and make people try it.
I'll make the demo level myself. It'll be very short and very condensed of what you can do in the game, mainly axed towards the actions part.
Most interface and gui stuff will be here, but the hard part will still be to tweak bullet's reaction in this level so that everything can happen accordingly in term of physical stuff (jumping, climbing, etc)
I'll hopefully be able to make a diagram explaining how the code works and how I wired the game loop to make it fast, networkable, and of course extendable and modifiable.

The hardest past here will obviously be to implement some MGS-typed infiltration AI (but since I already thought about the states it should be not be so awful), and also start to make the network protocol (which is totally not a priority versus the AI, since coop will only be successful if everything before already happenned accordingly).

4. I hope some modelers will have joined me by then, so the solo game can be start to have a 1st (short) story. The only things I would need to make the thing easier to modelers and level artists is to make some editor, but I don't feel it's necessary so I'll just add a devmode.

I honestly also don't wish to add some scriptable language into the game, since it's technically and "designly" not a simple choice to make;
Of those 2 things I won't do, it will be compensated by the fact that most behaviours will be hardcoded and only require configuration.
The AI will also be quite primitive in terms of reflexes and decision-taking, it will look very scripted and rigid, but since it takes the infiltration paradigm - 1 or few players against a mass of ennemies - it will still be scripted in a logic that does only make sense on the action level since you'll quickly lose if you don't plan your actions; errors won't pass.

5. If I still don't have failed until there, the game would have either attracted some attention or be just another utter failure.

In both case I'll be happy to continue to make a game I thought would represent a compilation of and contain all the elements of gameplays I love.
I'd be happier to mod it, tweak it, make it as much online as possible, instead of playing Blizzard games.